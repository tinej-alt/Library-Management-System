{"ast":null,"code":"import _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { handleRef } from './utils'; // ========================================================\n// react/packages/react-reconciler/src/ReactFiber.js\n// ========================================================\n\n/**\n * Detects if a passed element is a Fiber object instead of an element. Is needed as `ReactDOM.findDOMNode()` returns\n * a Fiber in `react-test-renderer` that can cause issues with tests. Is used only in non-production env.\n *\n * @see https://github.com/facebook/react/issues/7371#issuecomment-317396864\n * @see https://github.com/Semantic-Org/Semantic-UI-React/issues/4061#issuecomment-694895617\n */\nfunction isFiberRef(node) {\n  if (node === null) {\n    return false;\n  }\n  if (node instanceof Element || node instanceof Text) {\n    return false;\n  }\n  return !!(node.type && node.tag);\n}\nexport var RefFindNode = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(RefFindNode, _React$Component);\n  function RefFindNode() {\n    var _this;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.prevNode = void 0;\n    return _this;\n  }\n  var _proto = RefFindNode.prototype;\n  _proto.componentDidMount = function componentDidMount() {\n    var currentNode = ReactDOM.findDOMNode(this);\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFiberRef(currentNode)) {\n        currentNode = null;\n      }\n    }\n    this.prevNode = currentNode;\n    handleRef(this.props.innerRef, currentNode);\n  };\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var currentNode = ReactDOM.findDOMNode(this);\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFiberRef(currentNode)) {\n        currentNode = null;\n      }\n    }\n    if (this.prevNode !== currentNode) {\n      this.prevNode = currentNode;\n      handleRef(this.props.innerRef, currentNode);\n    }\n    if (prevProps.innerRef !== this.props.innerRef) {\n      handleRef(this.props.innerRef, currentNode);\n    }\n  };\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    handleRef(this.props.innerRef, null);\n    delete this.prevNode;\n  };\n  _proto.render = function render() {\n    var children = this.props.children;\n    return children;\n  };\n  return RefFindNode;\n}(React.Component);","map":{"version":3,"sources":["RefFindNode.tsx"],"names":["React","ReactDOM","handleRef","isFiberRef","node","Element","Text","type","tag","RefFindNode","Component","prevNode","componentDidMount","currentNode","findDOMNode","process","env","NODE_ENV","props","innerRef","componentDidUpdate","prevProps","componentWillUnmount","render","children"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport { handleRef, RefProps } from './utils';\n\n// ========================================================\n// react/packages/react-reconciler/src/ReactFiber.js\n// ========================================================\n\ntype Fiber = {\n  // Tag identifying the type of fiber.\n  tag: string;\n  // The resolved function/class/ associated with this fiber.\n  type: any;\n};\n\n/**\n * Detects if a passed element is a Fiber object instead of an element. Is needed as `ReactDOM.findDOMNode()` returns\n * a Fiber in `react-test-renderer` that can cause issues with tests. Is used only in non-production env.\n *\n * @see https://github.com/facebook/react/issues/7371#issuecomment-317396864\n * @see https://github.com/Semantic-Org/Semantic-UI-React/issues/4061#issuecomment-694895617\n */\nfunction isFiberRef(node: Element | Fiber | Text | null): boolean {\n  if (node === null) {\n    return false;\n  }\n\n  if (node instanceof Element || node instanceof Text) {\n    return false;\n  }\n\n  return !!(node.type && node.tag);\n}\n\nexport class RefFindNode extends React.Component<RefProps> {\n  prevNode?: Node | null;\n\n  componentDidMount() {\n    let currentNode = ReactDOM.findDOMNode(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFiberRef(currentNode)) {\n        currentNode = null;\n      }\n    }\n\n    this.prevNode = currentNode;\n    handleRef(this.props.innerRef, currentNode);\n  }\n\n  componentDidUpdate(prevProps: RefProps) {\n    let currentNode = ReactDOM.findDOMNode(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFiberRef(currentNode)) {\n        currentNode = null;\n      }\n    }\n\n    if (this.prevNode !== currentNode) {\n      this.prevNode = currentNode;\n      handleRef(this.props.innerRef, currentNode);\n    }\n\n    if (prevProps.innerRef !== this.props.innerRef) {\n      handleRef(this.props.innerRef, currentNode);\n    }\n  }\n\n  componentWillUnmount() {\n    handleRef(this.props.innerRef, null);\n\n    delete this.prevNode;\n  }\n\n  render() {\n    const { children } = this.props;\n\n    return children;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}